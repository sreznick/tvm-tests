Version 52.0

Constant Pool size 168
1: Tag 10 MethodRef Class index 34, Name and type index 112
2: Tag 11 InterfaceMethodRef Class index 36, Name and type index 113
3: Tag 9 FieldRef Class index 33, Name and type index 114
4: Tag 11 InterfaceMethodRef Class index 115, Name and type index 116
5: Tag 11 InterfaceMethodRef Class index 115, Name and type index 117
6: Tag 10 MethodRef Class index 33, Name and type index 118
7: Tag 11 InterfaceMethodRef Class index 119, Name and type index 120
8: Tag 7 Class Name index 121
9: Tag 7 Class Name index 122
10: Tag 11 InterfaceMethodRef Class index 9, Name and type index 123
11: Tag 11 InterfaceMethodRef Class index 8, Name and type index 124
12: Tag 11 InterfaceMethodRef Class index 115, Name and type index 125
13: Tag 11 InterfaceMethodRef Class index 115, Name and type index 126
14: Tag 11 InterfaceMethodRef Class index 115, Name and type index 127
15: Tag 11 InterfaceMethodRef Class index 115, Name and type index 128
16: Tag 11 InterfaceMethodRef Class index 115, Name and type index 129
17: Tag 11 InterfaceMethodRef Class index 115, Name and type index 130
18: Tag 11 InterfaceMethodRef Class index 115, Name and type index 131
19: Tag 11 InterfaceMethodRef Class index 115, Name and type index 132
20: Tag 11 InterfaceMethodRef Class index 115, Name and type index 133
21: Tag 11 InterfaceMethodRef Class index 115, Name and type index 134
22: Tag 11 InterfaceMethodRef Class index 115, Name and type index 135
23: Tag 11 InterfaceMethodRef Class index 115, Name and type index 136
24: Tag 11 InterfaceMethodRef Class index 115, Name and type index 137
25: Tag 11 InterfaceMethodRef Class index 115, Name and type index 138
26: Tag 11 InterfaceMethodRef Class index 115, Name and type index 139
27: Tag 11 InterfaceMethodRef Class index 115, Name and type index 140
28: Tag 11 InterfaceMethodRef Class index 115, Name and type index 141
29: Tag 11 InterfaceMethodRef Class index 115, Name and type index 142
30: Tag 11 InterfaceMethodRef Class index 115, Name and type index 143
31: Tag 11 InterfaceMethodRef Class index 115, Name and type index 144
32: Tag 11 InterfaceMethodRef Class index 115, Name and type index 145
33: Tag 7 Class Name index 146
34: Tag 7 Class Name index 147
35: Tag 7 Class Name index 148
36: Tag 7 Class Name index 149
37: Tag 1 Utf8 Value "reader"
38: Tag 1 Utf8 Value "Lorg/infinispan/protostream/TagReader;"
39: Tag 1 Utf8 Value "<init>"
40: Tag 1 Utf8 Value "ReadContext"
41: Tag 1 Utf8 Value "InnerClasses"
42: Tag 1 Utf8 Value "(Lorg/infinispan/protostream/ProtobufTagMarshaller$ReadContext;)V"
43: Tag 1 Utf8 Value "Code"
44: Tag 1 Utf8 Value "LineNumberTable"
45: Tag 1 Utf8 Value "LocalVariableTable"
46: Tag 1 Utf8 Value "this"
47: Tag 1 Utf8 Value "Lorg/wildfly/clustering/marshalling/protostream/DefaultProtoStreamReader;"
48: Tag 1 Utf8 Value "context"
49: Tag 1 Utf8 Value "Lorg/infinispan/protostream/ProtobufTagMarshaller$ReadContext;"
50: Tag 1 Utf8 Value "getReader"
51: Tag 1 Utf8 Value "()Lorg/infinispan/protostream/TagReader;"
52: Tag 1 Utf8 Value "readObject"
53: Tag 1 Utf8 Value "(Ljava/lang/Class;)Ljava/lang/Object;"
54: Tag 1 Utf8 Value "marshaller"
55: Tag 1 Utf8 Value "Lorg/infinispan/protostream/ProtobufTagMarshaller;"
56: Tag 1 Utf8 Value "result"
57: Tag 1 Utf8 Value "Ljava/lang/Object;"
58: Tag 1 Utf8 Value "targetClass"
59: Tag 1 Utf8 Value "Ljava/lang/Class;"
60: Tag 1 Utf8 Value "limit"
61: Tag 1 Utf8 Value "I"
62: Tag 1 Utf8 Value "oldLimit"
63: Tag 1 Utf8 Value "LocalVariableTypeTable"
64: Tag 1 Utf8 Value "Lorg/infinispan/protostream/ProtobufTagMarshaller<TT;>;"
65: Tag 1 Utf8 Value "TT;"
66: Tag 1 Utf8 Value "Ljava/lang/Class<TT;>;"
67: Tag 1 Utf8 Value "StackMapTable"
68: Tag 7 Class Name index 150
69: Tag 7 Class Name index 151
70: Tag 7 Class Name index 152
71: Tag 1 Utf8 Value "Exceptions"
72: Tag 7 Class Name index 153
73: Tag 1 Utf8 Value "Signature"
74: Tag 1 Utf8 Value "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;"
75: Tag 1 Utf8 Value "pushLimit"
76: Tag 1 Utf8 Value "(I)I"
77: Tag 1 Utf8 Value "popLimit"
78: Tag 1 Utf8 Value "(I)V"
79: Tag 1 Utf8 Value "isAtEnd"
80: Tag 1 Utf8 Value "()Z"
81: Tag 1 Utf8 Value "readTag"
82: Tag 1 Utf8 Value "()I"
83: Tag 1 Utf8 Value "checkLastTagWas"
84: Tag 1 Utf8 Value "tag"
85: Tag 1 Utf8 Value "skipField"
86: Tag 1 Utf8 Value "(I)Z"
87: Tag 1 Utf8 Value "readBool"
88: Tag 1 Utf8 Value "readEnum"
89: Tag 1 Utf8 Value "readInt32"
90: Tag 1 Utf8 Value "readFixed32"
91: Tag 1 Utf8 Value "readUInt32"
92: Tag 1 Utf8 Value "readSInt32"
93: Tag 1 Utf8 Value "readSFixed32"
94: Tag 1 Utf8 Value "readInt64"
95: Tag 1 Utf8 Value "()J"
96: Tag 1 Utf8 Value "readFixed64"
97: Tag 1 Utf8 Value "readUInt64"
98: Tag 1 Utf8 Value "readSInt64"
99: Tag 1 Utf8 Value "readSFixed64"
100: Tag 1 Utf8 Value "readFloat"
101: Tag 1 Utf8 Value "()F"
102: Tag 1 Utf8 Value "readDouble"
103: Tag 1 Utf8 Value "()D"
104: Tag 1 Utf8 Value "readByteArray"
105: Tag 1 Utf8 Value "()[B"
106: Tag 1 Utf8 Value "readByteBuffer"
107: Tag 1 Utf8 Value "()Ljava/nio/ByteBuffer;"
108: Tag 1 Utf8 Value "readString"
109: Tag 1 Utf8 Value "()Ljava/lang/String;"
110: Tag 1 Utf8 Value "SourceFile"
111: Tag 1 Utf8 Value "DefaultProtoStreamReader.java"
112: Tag 12 NameAndType Name index 39, Description index 156
113: Tag 12 NameAndType Name index 50, Description index 51
114: Tag 12 NameAndType Name index 37, Description index 38
115: Tag 7 Class Name index 157
116: Tag 12 NameAndType Name index 91, Description index 82
117: Tag 12 NameAndType Name index 75, Description index 76
118: Tag 12 NameAndType Name index 158, Description index 159
119: Tag 7 Class Name index 160
120: Tag 12 NameAndType Name index 161, Description index 162
121: Tag 1 Utf8 Value "org/infinispan/protostream/ProtobufTagMarshaller"
122: Tag 1 Utf8 Value "org/wildfly/clustering/marshalling/protostream/ProtoStreamMarshaller"
123: Tag 12 NameAndType Name index 163, Description index 164
124: Tag 12 NameAndType Name index 165, Description index 166
125: Tag 12 NameAndType Name index 83, Description index 78
126: Tag 12 NameAndType Name index 77, Description index 78
127: Tag 12 NameAndType Name index 79, Description index 80
128: Tag 12 NameAndType Name index 81, Description index 82
129: Tag 12 NameAndType Name index 85, Description index 86
130: Tag 12 NameAndType Name index 87, Description index 80
131: Tag 12 NameAndType Name index 88, Description index 82
132: Tag 12 NameAndType Name index 89, Description index 82
133: Tag 12 NameAndType Name index 90, Description index 82
134: Tag 12 NameAndType Name index 92, Description index 82
135: Tag 12 NameAndType Name index 93, Description index 82
136: Tag 12 NameAndType Name index 94, Description index 95
137: Tag 12 NameAndType Name index 96, Description index 95
138: Tag 12 NameAndType Name index 97, Description index 95
139: Tag 12 NameAndType Name index 98, Description index 95
140: Tag 12 NameAndType Name index 99, Description index 95
141: Tag 12 NameAndType Name index 100, Description index 101
142: Tag 12 NameAndType Name index 102, Description index 103
143: Tag 12 NameAndType Name index 104, Description index 105
144: Tag 12 NameAndType Name index 106, Description index 107
145: Tag 12 NameAndType Name index 108, Description index 109
146: Tag 1 Utf8 Value "org/wildfly/clustering/marshalling/protostream/DefaultProtoStreamReader"
147: Tag 1 Utf8 Value "org/wildfly/clustering/marshalling/protostream/DefaultProtoStreamOperation"
148: Tag 1 Utf8 Value "org/wildfly/clustering/marshalling/protostream/ProtoStreamReader"
149: Tag 1 Utf8 Value "org/infinispan/protostream/ProtobufTagMarshaller$ReadContext"
150: Tag 1 Utf8 Value "java/lang/Object"
151: Tag 1 Utf8 Value "java/lang/Class"
152: Tag 1 Utf8 Value "java/lang/Throwable"
153: Tag 1 Utf8 Value "java/io/IOException"
154: Tag 7 Class Name index 167
155: Tag 1 Utf8 Value "OperationContext"
156: Tag 1 Utf8 Value "(Lorg/infinispan/protostream/ProtobufTagMarshaller$OperationContext;)V"
157: Tag 1 Utf8 Value "org/infinispan/protostream/TagReader"
158: Tag 1 Utf8 Value "getSerializationContext"
159: Tag 1 Utf8 Value "()Lorg/infinispan/protostream/ImmutableSerializationContext;"
160: Tag 1 Utf8 Value "org/infinispan/protostream/ImmutableSerializationContext"
161: Tag 1 Utf8 Value "getMarshaller"
162: Tag 1 Utf8 Value "(Ljava/lang/Class;)Lorg/infinispan/protostream/BaseMarshaller;"
163: Tag 1 Utf8 Value "readFrom"
164: Tag 1 Utf8 Value "(Lorg/wildfly/clustering/marshalling/protostream/ProtoStreamReader;)Ljava/lang/Object;"
165: Tag 1 Utf8 Value "read"
166: Tag 1 Utf8 Value "(Lorg/infinispan/protostream/ProtobufTagMarshaller$ReadContext;)Ljava/lang/Object;"
167: Tag 1 Utf8 Value "org/infinispan/protostream/ProtobufTagMarshaller$OperationContext"

Flags: decimal 33, hex 0021, binary 0000000000100001 public super

This class: id 33, name org.wildfly.clustering.marshalling.protostream.DefaultProtoStreamReader

Super class: id 34, name org.wildfly.clustering.marshalling.protostream.DefaultProtoStreamOperation

Implements class ids 35 36
Implements names org.wildfly.clustering.marshalling.protostream.ProtoStreamReader org.infinispan.protostream.ProtobufTagMarshaller$ReadContext

Field name reader (index 37), type Lorg/infinispan/protostream/TagReader; (descriptor index 38)
Human type: org.infinispan.protostream.TagReader
Flags: decimal 18, hex 0012, binary 0000000000010010 private final
No field attributes

Method name <init> (index 39), type (Lorg/infinispan/protostream/ProtobufTagMarshaller$ReadContext;)V (descriptor index 42)
Human type: (org.infinispan.protostream.ProtobufTagMarshaller$ReadContext): void
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 76
Method name getReader (index 50), type ()Lorg/infinispan/protostream/TagReader; (descriptor index 51)
Human type: (): org.infinispan.protostream.TagReader
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 47
Method name readObject (index 52), type (Ljava/lang/Class;)Ljava/lang/Object; (descriptor index 53)
Human type: (java.lang.Class): java.lang.Object
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 330
Method attribute name Exceptions, size 4
Method attribute name Signature, size 2
Method name pushLimit (index 75), type (I)I (descriptor index 76)
Human type: (int): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 63
Method attribute name Exceptions, size 4
Method name popLimit (index 77), type (I)V (descriptor index 78)
Human type: (int): void
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 67
Method name isAtEnd (index 79), type ()Z (descriptor index 80)
Human type: (): boolean
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readTag (index 81), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name checkLastTagWas (index 83), type (I)V (descriptor index 78)
Human type: (int): void
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 67
Method attribute name Exceptions, size 4
Method name skipField (index 85), type (I)Z (descriptor index 86)
Human type: (int): boolean
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 63
Method attribute name Exceptions, size 4
Method name readBool (index 87), type ()Z (descriptor index 80)
Human type: (): boolean
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readEnum (index 88), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readInt32 (index 89), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readFixed32 (index 90), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readUInt32 (index 91), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readSInt32 (index 92), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readSFixed32 (index 93), type ()I (descriptor index 82)
Human type: (): int
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readInt64 (index 94), type ()J (descriptor index 95)
Human type: (): long
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readFixed64 (index 96), type ()J (descriptor index 95)
Human type: (): long
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readUInt64 (index 97), type ()J (descriptor index 95)
Human type: (): long
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readSInt64 (index 98), type ()J (descriptor index 95)
Human type: (): long
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readSFixed64 (index 99), type ()J (descriptor index 95)
Human type: (): long
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readFloat (index 100), type ()F (descriptor index 101)
Human type: (): float
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readDouble (index 102), type ()D (descriptor index 103)
Human type: (): double
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readByteArray (index 104), type ()[B (descriptor index 105)
Human type: (): byte[]
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readByteBuffer (index 106), type ()Ljava/nio/ByteBuffer; (descriptor index 107)
Human type: (): java.nio.ByteBuffer
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4
Method name readString (index 108), type ()Ljava/lang/String; (descriptor index 109)
Human type: (): java.lang.String
Flags: decimal 1, hex 0001, binary 0000000000000001 public
Method attribute name Code, size 52
Method attribute name Exceptions, size 4

Class attribute name SourceFile, size 2
Class attribute name InnerClasses, size 18
